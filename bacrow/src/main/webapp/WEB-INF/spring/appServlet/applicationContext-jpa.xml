<?xml version="1.0" encoding="UTF-8"?>
<!--
	Application context definition for PetClinic on JDBC.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

    <!-- import the dataSource definition -->
    <import resource="applicationContext-dataSource.xml"/>

	<!-- JPA EntityManagerFactory -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
		
		    <!-- Use Hibernate as JPA engine -->
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
				p:database="${jpa.database}" p:showSql="${jpa.showSql}" />
		
			<!-- <bean class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter" 
				p:database="${jpa.database}" p:showSql="${jpa.showSql}"/> -->
				
		</property>
		<property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml" />
		
		<!--  to scan for entities -->
		 <property name="persistenceUnitPostProcessors">
    		<list>
     			 <bean class="com.bac.bacrow.system.BacPersistenceUnitPostProcessor">
     			 	<property name="path" value="com/bac/bacrow/domain/*.class" />
     			 </bean>
   			 </list>
  		</property>
	</bean>

	<!-- Transaction manager for a single JPA EntityManagerFactory (alternative 
		to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
		p:entityManagerFactory-ref="entityManagerFactory" />


	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->
	
	<!-- Scan the classpath for annotated components that will be auto-registered as 
	     Spring beans. By default, the Spring-provided @Component, @Repository, @Service, 
	     and @Controller stereotypes will be detected.  
	<context:component-scan base-package="com.bac.bacrow.dao" />
	<context:component-scan base-package="com.bac.bacrow.services" />
-->

	<!--
		Activates various annotations to be detected in bean classes: Spring's
		@Required and @Autowired, as well as JSR 250's @PostConstruct,
		@PreDestroy and @Resource (if available) and JPA's @PersistenceContext
		and @PersistenceUnit (if available).
	-->
	<context:annotation-config/>

	<!--
		Instruct Spring to retrieve and apply @AspectJ aspects which are defined
		as beans in this context (such as the CallMonitoringAspect below).
	-->
	<aop:aspectj-autoproxy/>

	<!--
		Instruct Spring to perform automatic transaction management on annotated classes.
		The SimpleJdbcClinic implementation declares @Transactional annotations.
		"proxy-target-class" is set because of SimpleJdbcClinic's @ManagedOperation usage.
	-->
	<tx:annotation-driven/>

</beans>